openapi: 3.0.0
info:
  title: SurfApp
  description: Web API to manage a surf club
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0-oas3
paths:
  /api/auth/login:
    post:
      summary: login
      operationId: postLoginApi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_body'
      responses:
        '200':
          description: response body should be a member object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/auth/logout:
    post:
      summary: logout
      operationId: postLogoutApi
      responses:
        '200':
          description: response body should be a message object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'  
  /api/users:
    get:
      summary: fetches list of users
      operationId: getUsersApi
      parameters:
        - in: query
          name: offset
          required: true
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          required: true
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: username
          required: false
          schema:
            type: string
          description: The name to be filtered
        - in: query
          name: name
          required: false
          schema:
            type: string
          description: The username to be filtered
        - in: query
          name: email
          required: false
          schema:
            type: string
          description: The email to be filtered
      responses:
        '200':
          description: response body should be a user object array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: creates a user
      operationId: postUserApi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_user_body'
      responses:
        '201':
          description: response body should be the id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/users/{id}:
    get:
      summary: fetches a single user
      operationId: getUserByIdApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be a user object
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/userById'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      summary: updates a user
      operationId: updateUserApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_user_id_body'
      responses:
        '200':
          description: response body should be a user object
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/userById'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: deletes a user
      operationId: deleteUserApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be the id
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/id'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/users/sports:
    get:
      summary: fetches all sports associated with the users
      operationId: getUsersSportsApi
      responses:
        '200':
          description: response body should be a sport object joined with user object array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersSports'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/users/sports/{sid}:
    get:
      summary: fetches all sports associated with the users
      operationId: getUsersSportApi
      parameters:
        - name: sid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - in: query
          name: offset
          required: true
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          required: true
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: response body should be a sport object joined with user object array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersSports'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/users/{id}/sports:
    get:
      summary: fetches all users associated with the sport
      operationId: getUserSportsByIdApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - in: query
          name: offset
          required: true
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          required: true
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: response body should be a sport object joined with user object array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersSports'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: creates a user sport
      operationId: postUserSportApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_user_sport_post_body'
      responses:
        '201':
          description: response body should be a pair of ids
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/user_sport_ids'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/users/{id}/sports/{sid}:
    put:
      summary: updates a user sport
      operationId: updateUserSportApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: sid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_user_sport_put_body'
      responses:
        '200':
          description: response body should be a user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_sport_ids'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: deleted a user sport
      operationId: deleteUserSportApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: sid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be a message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/sports:
    get:
      summary: fetches a list of sports
      operationId: getSportsApi
      responses:
        '200':
          description: response body should be a sport object array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/sport'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: creates a sport
      operationId: postSportApi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/post_sports_body'
      responses:
        '201':
          description: response body should be an id
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/id'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/sports/{sid}:
    get:
      summary: fetches a single sport
      operationId: getSportByIdApi
      parameters:
        - name: sid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be a sport object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sport_by_id'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: deletes a sport
      operationId: deleteSportApi
      parameters:
        - name: sid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be a message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      summary: updates a sport
      operationId: updateSportApi
      parameters:
        - name: sid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/put_sports_body'
      responses:
        '200':
          description: response body should be an id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/validate/{id}:
    get:
      summary: validates a member
      operationId: validateApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be a user information on validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validated_user'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/quotas:
    get:
      summary: fetches all quotas
      operationId: getQuotasApi
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: Username of the member
        - in: query
          name: email
          schema:
            type: integer
          description: Email of the member
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Date of the quota
        - in: query
          name: offset
          required: true
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          required: true
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: response body should be a quotas object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/quotas'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: creates a quota
      operationId: postQuotaApi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quotas_body'
      responses:
        '201':
          description: response body should be a quota object
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/message'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/quotas/{id}:
    put:
      summary: updates a quota
      operationId: updateMemberQuotaApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quotas_id_body'
      responses:
        '200':
          description: response body should be the quota id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/quotas/users:
    get:
      summary: fetches all quotas from users
      operationId: getUsersQuotasApi
      responses:
        '200':
          description: response body should be a quota object array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/quota'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/quotas/companies:
    get:
      summary: fetches all quotas from companies
      operationId: getCompaniesQuotasApi
      responses:
        '200':
          description: response body should be a quota object array
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/quota'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/quotas/members/{id}:
    get:
      summary: fetches all quotas from a specific member
      operationId: getMembersQuotasApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - in: query
          name: offset
          required: true
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          required: true
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: response body should be a quota object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/quotas'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/quotas/management:
    get:
      summary: fetches all quotas from a specific member
      operationId: getManagementQuotasApi
      responses:
        '200':
          description: response body should be a quota management object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/quotas_management'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: creates a management quota
      operationId: postManagementQuotasApi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quotas_management_body'
      responses:
        '200':
          description: response body should be a message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/quotas/management/{type}:
    put:
      summary: updates a quota type
      operationId: putManagementQuotasApi
      parameters:
        - name: type
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: response body should be a quota type string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/quota_type'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/companies:
    get:
      summary: fetches all companies
      operationId: getCompaniesApi
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: Username of the company
        - in: query
          name: name
          schema:
            type: string
          description: Name of the company
        - in: query
          name: email
          schema:
            type: string
          description: Email of the company
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: response body should be a company object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/companies'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: creates a company
      operationId: postCompanyApi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/company_body'
      responses:
        '201':
          description: response body should be an id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/companies/{cid}:
    get:
      summary: fetches a specific company
      operationId: getCompanyByIdApi
      parameters:
        - name: cid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be a company object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/companyById'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      summary: updates a company
      operationId: putCompanyApi
      parameters:
        - name: cid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/company_cid_body'
      responses:
        '200':
          description: response body should be an company object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company_cid'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: deletes a company
      operationId: deleteCompanyApi
      parameters:
        - name: cid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be a message object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/events:
    get:
      summary: fetches all the events
      operationId: getEvents
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          required: true
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          required: true
          description: The numbers of items to return
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Filtering by name
        - in: query
          name: initialDate
          schema:
            type: string
            format: date
          required: false
          description: Filtering by initial date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          required: false
          description: Filtering by end date
      responses:
        '200':
          description: response body should be a object with an array and a integer
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/events'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: creates a event
      operationId: postEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_events_body'
      responses:
        '201':
          description: response body should be a event id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/events/{id}:
    get:
      summary: fetches a specific event
      operationId: getEventByIdApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be a event object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      summary: updates a event
      operationId: putEventApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_events_body'
      responses:
        '200':
          description: response body should be an id
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/id'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: deletes a event
      operationId: deleteEventApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be a message object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/events/members/{id}/attendance:
    get: 
      summary: fetches a specific member attendances
      operationId: getEventAttendanceByMemberIdApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
          required: true
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          required: true
          description: The numbers of items to return
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: Filtering by name
        - in: query
          name: state
          schema:
            type: string
          required: false
          description: Filtering by initial date
        - in: query
          name: date
          schema:
            type: string
            format: date
          required: false
          description: Filtering by end date
      responses:
        '200':
          description: response body should be a object with a array a number of events
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/attendance_event_member'
                  number_of_events:
                    type: integer
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/events/{eid}/attendance:
    get:
      summary: fetches a specific event
      operationId: getEventAttendanceByIdApi
      parameters:
        - name: eid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
          required: true
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          required: true
          description: The numbers of items to return
      responses:
        '200':
          description: response body should be a object with a array and number of attendances
          content:
            application/json:
              schema:
                type: object
                properties:
                  attendance:
                    type: array
                    items:
                      $ref: '#/components/schemas/event_attendance'
                  number_of_attendance:
                    type: integer
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: updates a event
      operationId: postEventAttendanceApi
      parameters:
        - name: eid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_attendance_body'
      responses:
        '201':
          description: response body should be an id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id_pair'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      summary: updates a event
      operationId: putEventAttendanceApi
      parameters:
        - name: eid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/api_attendance_body'
      responses:
        '200':
          description: response body should be an id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id_pair'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/candidates:
    get:
      summary: fetches list of candidates
      operationId: getCandidatesApi
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: Username of the candidate
        - in: query
          name: name
          schema:
            type: string
          description: Name of the candidate
        - in: query
          name: email
          schema:
            type: string
          description: Email of the candidate
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        '200':
          description: response body should be a candidate object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidates'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: creates a candidate
      operationId: postCandidateApi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/candidate_body'
      responses:
        '201':
          description: response body should be a candidate object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/id'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/candidates/{id}:
    get:
      summary: fetches a specific candidate
      operationId: getCandidateByIdApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be a candidate object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/candidate_id'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      summary: updates a candidate
      operationId: putCandidateApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/approve_candidate_body'
      responses:
        '200':
          description: response body should be an id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      summary: deletes a candidate
      operationId: deleteCandidateApi
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: response body should be a message object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: response body should be an error object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
                
components:
  schemas:
    validated_user:
      type: object
      required:
        - has_debt_
        - full_name_
      properties:
        has_debt_:
          type: boolean
        member_type_:
          type: string
    users:
      type: object
      required:
        - users
        - number_of_users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/user'
        number_of_users:
          type: integer
    user:
      required:
        - member_id_
        - cc_
        - nif_
        - birth_date_
        - nationality_
        - full_name_
        - enrollment_date_
        - paid_enrollment_
        - is_admin_
        - gender_
        - member_type_
        - has_debt_
        - username_
        - location_
        - address_
        - postal_code_
        - email_
        - phone_number_
        - img_value_
        - is_deleted_
        - iban
      type: object
      properties:
        member_id_:
          type: integer
        cc_:
          type: integer
        nif_:
          type: integer
        birth_date_:
          type: string
          format: date
        nationality_:
          type: string
        full_name_:
          type: string
        enrollment_date_:
          type: string
          format: date
        paid_enrollment_:
          type: boolean
        is_admin_:
          type: boolean
        gender_:
          type: string
        member_type_:
          type: string
        has_debt_:
          type: boolean
        username_:
          type: string
        location_:
          type: string
        address_:
          type: string
        postal_code_:
          type: string
          format: ^\d{4}-\d{3}$
        email_:
          type: string
        phone_number_:
          type: integer
        img_value_:
          type: string
        is_deleted_:
          type: boolean
        iban_:
          type: string
    userById:
      required:
        - member_id_
        - cc_
        - nif_
        - birth_date_
        - nationality_
        - full_name_
        - enrollment_date_
        - paid_enrollment_
        - is_admin_
        - gender_
        - member_type_
        - has_debt_
        - username_
        - location_
        - address_
        - postal_code_
        - email_
        - phone_number_
        - is_deleted_
        - qrcode_
        - iban_
        - img_value_
      type: object
      properties:
        member_id_:
          type: integer
        cc_:
          type: integer
        nif_:
          type: integer
        birth_date_:
          type: string
          format: date
        nationality_:
          type: string
        full_name_:
          type: string
        enrollment_date_:
          type: string
          format: date
        paid_enrollment_:
          type: boolean
        is_admin_:
          type: boolean
        gender_:
          type: string
        member_type_:
          type: string
        has_debt_:
          type: boolean
        username_:
          type: string
        location_:
          type: string
        address_:
          type: string
        postal_code_:
          type: string
          format: ^\d{4}-\d{3}$
        email_:
          type: string
        phone_number_:
          type: integer
        img_value_:
          type: string
        is_deleted_:
          type: boolean
        qrcode_:
          type: string
        iban_:
          type: string
    api_user_body:
      type: object
      required:
        - cc
        - nif
        - type
        - birth_date
        - nationality
        - full_name
        - phone_number
        - email
        - postal_code
        - location
        - address
        - password
        - username
        - paid_enrollment
        - gender
        - iban
      properties:
        cc:
          type: integer
        nif:
          type: integer
        type:
          type: string
        birth_date:
          type: string
          format: date
        nationality:
          type: string
        full_name:
          type: string
        location:
          type: string
        address:
          type: string
        postal_code:
          type: string
          format: ^\d{4}-\d{3}$
        email:
          type: string
        phone_number:
          type: integer
        password:
          type: string
          format: password
        username:
          type: string
        paid_enrollment:
          type: boolean
        gender:
          type: string
        iban:
          type: string
        img:
          type: string
    api_user_id_body:
      type: object
      required:
        - id
        - nif
        - cc
        - type
        - birth_date
        - nationality
        - full_name
        - location
        - address
        - postal_code
        - phone_number
        - is_admin
        - paid_enrollment
        - gender
        - is_deleted
        - iban
      properties:
        id:
          type: integer
        cc:
          type: integer
        nif:
          type: integer
        type:
          type: string
        birth_date:
          type: string
          format: date
        nationality:
          type: string
        full_name:
          type: string
        location:
          type: string
        address:
          type: string
        postal_code:
          type: string
          format: ^\d{4}-\d{3}$
        phone_number:
          type: integer
        img:
          type: string
        is_admin:
          type: boolean
        paid_enrollment:
          type: boolean
        gender:
          type: string
        is_deleted:
          type: boolean
        iban:
          type: string
    usersSports:
      required:
        - sports
        - number_of_sports
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/usersSport'
        number_of_users:
          type: integer
    usersSport:
      required:
        - fed_id_
        - fed_name_
        - fed_number_
        - is_absent_
        - name_
        - sport_id_
        - type_
        - user_id_
        - username_
        - years_federated_
      type: object
      properties:
        username_:
          type: string
        name_:
          type: string
        user_id_:
          type: integer
        sport_id_:
          type: integer
        type_:
          type: array
          items:
            type: string
        fed_number_:
          type: integer
        fed_id_:
          type: integer
        fed_name_:
          type: string
        years_federated_:
          type: array
          items:
            type: integer
        is_absent_:
          type: boolean
    api_user_sport_post_body:
      type: object
      required:
        - id
        - sid
        - fed_id
        - fed_number
        - fed_name
        - type
        - years_federated
      properties:
        id:
          type: integer
        sid:
          type: integer
        fed_id:
          type: integer
        fed_number:
          type: integer
        fed_name:
          type: string
        type:
          type: array
          items:
            type: string
        years_federated:
          type: array
          items:
            type: integer
    api_user_sport_put_body:
      type: object
      required:
        - id
        - sid
        - fed_id
        - fed_number
        - fed_name
        - type
        - years_federated
        - is_absent
      properties:
        id:
          type: integer
        sid:
          type: integer
        fed_id:
          type: integer
        fed_number:
          type: integer
        fed_name:
          type: string
        type:
          type: array
          items:
            type: string
        years_federated:
          type: array
          items:
            type: integer
        is_absent:
          type: boolean
    message:
      required:
        - message
        - message_code
      type: object
      properties:
        message:
          type: string
        message_code:
          type: string
    id:
      type: integer
    user_sport_ids:
      required:
        - id_
        - sid_
      type: object
      properties:
        id_:
          type: integer
        sid_:
          type: integer
    sport:
      required:
        - id_
        - name_
        - is_deleted_
        - practitioners_
      type: object
      properties:
        id_:
          type: integer
        name_:
          type: string
        is_deleted_:
          type: boolean
        practitioners_:
          type: integer
    sport_by_id:
      required:
        - id_
        - name_
        - is_deleted_
      type: object
      properties:
        id_:
          type: integer
        name_:
          type: string
        is_deleted_:
          type: boolean
    error:
      required:
        - message
      type: object
      properties:
        message:
          type: string
        status:
          type: integer
        message_code:
          type: integer
    post_sports_body:
      type: object
      properties:
        name:
          type: string
    put_sports_body:
      type: object
      properties:
        name_:
          type: string
        is_deleted_:
          type: boolean
    quota:
      required:
        - date_
        - id_
        - member_id_
        - payment_date_
        - username_
        - iban_
      type: object
      properties:
        id_:
          type: integer
        member_id_:
          type: integer
        username_:
          type: string
        payment_date_:
          type: string
          format: date
          nullable: true
        date_:
          type: string
          format: date
        iban_:
          type: string
    quotas:
      type: object
      properties:
        quotas:
          type: array
          items:                   
            $ref: '#/components/schemas/quota'
        number_of_quotas:
          type: integer
    quotas_management:
      type: object
      properties:
        type_:
          type: string
        quota_value_:
          type: integer
    quotas_management_body:
      type: object
      properties:
        type_:
          type: string
        quota_value_:
          type: integer
    quota_type:
      type: string
    quotas_body:
      type: object
      properties:
        date:
          type: string
          format: date
    quotas_id_body:
      type: object
      properties:
        payment_date_:
          type: string
          format: date
    company:
      required:
        - member_id_
        - name_
        - nif_
        - username_
        - member_type_
        - has_debt_
        - email_
        - is_deleted_
        - iban_
      type: object
      properties:
        member_id_:
          type: integer
        name_:
          type: string
        nif_:
          type: integer
        username_:
          type: string
        email_:
          type: string
        member_type_:
          type: string
        has_debt_:
          type: boolean
        is_deleted_:
          type: boolean
        iban_:
          type: string
    companies:
      type: object
      properties:
        companies:
          type: array
          items:
            $ref: '#/components/schemas/company'
        number_of_companies:
          type: integer
    companyById:
      required:
        - address_
        - email_
        - has_debt_
        - location_
        - member_id_
        - name_
        - nif_
        - phone_number_
        - postal_code_
        - username_
        - is_deleted_
        - img_value_
        - member_type_
        - iban_
      type: object
      properties:
        member_id_:
          type: integer
        name_:
          type: string
        nif_:
          type: integer
        location_:
          type: string
        address_:
          type: string
        postal_code_:
          type: string
          format: ^\d{4}-\d{3}$
        email_:
          type: string
        phone_number_:
          type: integer
        username_:
          type: string
        has_debt_:
          type: boolean
        is_deleted_:
          type: boolean
        img_value_:
          type: string
        member_type_:
          type: string
        iban_:
          type: string
    company_body:
      type: object
      properties:
        name:
          type: string
        nif:
          type: integer
        phone_number:
          type: integer
        email:
          type: string
        postal_code:
          type: string
        address:
          type: string
        location:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
        type:
          type: string
        img: 
          type: string
        iban:
          type: string
    company_cid_body:
      type: object
      properties:
        name:
          type: string
        nif:
          type: integer
        phone_number:
          type: integer
        email:
          type: string
        postal_code:
          type: integer
        address:
          type: string
        location:
          type: string
        img:
          type: string
        is_deleted:
          type: boolean
        iban:
          type: string
    company_cid:
      required:
        - address_
        - email_
        - has_debt_
        - location_
        - member_id_
        - name_
        - nif_
        - phone_number_
        - postal_code_
        - username_
        - is_deleted_
        - img_value_
        - member_type_
        - iban_
        - is_admin_
      type: object
      properties:
        member_id_:
          type: integer
        name_:
          type: string
        nif_:
          type: integer
        location_:
          type: string
        address_:
          type: string
        postal_code_:
          type: string
          format: ^\d{4}-\d{3}$
        email_:
          type: string
        phone_number_:
          type: integer
        username_:
          type: string
        has_debt_:
          type: boolean
        is_deleted_:
          type: boolean
        img_value_:
          type: string
        member_type_:
          type: string
        iban_:
          type: string
        is_admin_:
          type: boolean
    events:
      type: object
      properties:
        events:
          type: array
          items: 
            $ref: '#/components/schemas/event'
        number_of_events:
          type: integer
    event:
      type: object
      properties:
        id_:
          type: integer
        name_:
          type: string
        initial_date_:
          type: string
          format: date
        end_date_:
          type: string
          format: date
        status:
          type: string
    event_attendance:
      type: object
      properties:
        member_id_:
          type: integer
        username_:
          type: string
        event_id_:
          type: integer
        name_:
          type: string
        state_:
          type: string
        email_:
          type: string
          format: date
        phone_number_:
          type: string
    attendance_event_member:
      type: object
      properties:
        member_id:
          type: integer
        event_id_:
          type: integer
        name_:
          type: string
        state:
          type: string
        initial_date_:
          type: string
          format: date
        end_date_:
          type: string
          format: date
    api_events_body:
      type: object
      properties:
        name:
          type: string
        initial_date:
          type: string
          format: date
        final_date:
          type: string
          format: date
    api_attendance_body:
      type: object
      properties:
        id:
          type: integer
        state:
          type: string
    id_pair:
      type: object
      properties:
        eid:
          type: integer
        id:
          type: integer
    candidate:
      type: object
      properties:
        id_:
          type: integer
        username_:
          type: string
        cc_:
          type: string
        nif_:
          type: string
        birth_date_:
          type: string
          format: date
        nationality_:
          type: string
        full_name_:
          type: string
        phone_number_:
          type: integer
        email_:
          type: string
          format: email
        postal_code_:
          type: string
        address_:
          type: string
        location_:
          type: string
        gender_:
          type: string
        iban_:
          type: string
    candidates:
      type: object
      properties:
        candidates:
          type: array
          items:
            $ref: '#/components/schemas/candidate'
        number_of_candidates:
          type: integer
    candidate_body:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        cc:
          type: string
        nif:
          type: string
        birth_date:
          type: string
          format: date
        nationality:
          type: string
        full_name:
          type: string
        phone_number:
          type: integer
        email:
          type: string
          format: email
        postal_code:
          type: string
        address:
          type: string
        location:
          type: string
        img:
          type: string
        gender:
          type: string
        iban:
          type: string
    candidate_id:
      type: object
      properties:
        id_:
          type: integer
        username_:
          type: string
        cc_:
          type: string
        nif_:
          type: string
        birth_date_:
          type: string
          format: date
        nationality_:
          type: string
        full_name_:
          type: string
        phone_number_:
          type: integer
        email_:
          type: string
          format: email
        postal_code_:
          type: string
        address_:
          type: string
        location_:
          type: string
        gender_:
          type: string
        iban_:
          type: string
        img_:
          type: string
    approve_candidate_body:
      type: object
      properties:
        type_:
          type: string
        paid_enrollment_:
          type: boolean
    member:
      type: object
      properties:
        id_:
          type: integer
        member_type_:
          type: string
        has_debt_:
          type: boolean 
        quota_value_:
          type: integer 
        is_deleted_:
          type: boolean 
        username_:
          type: string
        pword_:
          type: string 
        iban_:
          type: string 
    login_body:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    
  parameters:
    qidParameter:
      name: qid
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    idParameter:
      name: id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    sidParameter:
      name: sid
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    cidParameter:
      name: cid
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: integer